// background.js (Service Worker for MV3)
console.log("SERVICE WORKER (Toolkit Pro): Script started.");
const SFMC_WRAPPER_HOST="user-content.s4.sfmc-content.com",SFMC_WRAPPER_PREFIX_PATH="/httpgetwrap|",STORAGE_KEY_SFMC_UNWRAPPER_ENABLED='sfmcUnwrapperEnabled';let isSfmcUnwrapperEnabled=!0;async function loadInitialSfmcState(){try{const t=await chrome.storage.sync.get(STORAGE_KEY_SFMC_UNWRAPPER_ENABLED);isSfmcUnwrapperEnabled=void 0!==t[STORAGE_KEY_SFMC_UNWRAPPER_ENABLED]?t[STORAGE_KEY_SFMC_UNWRAPPER_ENABLED]:!0,void 0===t[STORAGE_KEY_SFMC_UNWRAPPER_ENABLED]&&await chrome.storage.sync.set({[STORAGE_KEY_SFMC_UNWRAPPER_ENABLED]:!0}),console.log("SERVICE WORKER: SFMC Unwrapper state loaded. Enabled:",isSfmcUnwrapperEnabled)}catch(t){console.error("SERVICE WORKER: Error loading SFMC state:",t),isSfmcUnwrapperEnabled=!0}}chrome.storage.onChanged.addListener((t,e)=>{e==="sync"&&t[STORAGE_KEY_SFMC_UNWRAPPER_ENABLED]&&(isSfmcUnwrapperEnabled=t[STORAGE_KEY_SFMC_UNWRAPPER_ENABLED].newValue,console.log("SERVICE WORKER: SFMC Unwrapper state changed. Now:",isSfmcUnwrapperEnabled))}),chrome.webRequest.onBeforeRequest.addListener(async function(t){if(!isSfmcUnwrapperEnabled||"GET"!==t.method||"main_frame"!==t.type||!t.url||!t.tabId||t.tabId<0)return;try{const e=new URL(t.url);if(e.hostname===SFMC_WRAPPER_HOST&&e.pathname.startsWith(SFMC_WRAPPER_PREFIX_PATH)){const o=e.pathname.substring(SFMC_WRAPPER_PREFIX_PATH.length);if(!o){console.warn(`SERVICE WORKER: Incomplete SFMC (no target): ${t.url}. Redirecting to about:blank.`);try{await chrome.tabs.update(t.tabId,{url:"about:blank"})}catch(t){console.error("SERVICE WORKER: Error redirecting to about:blank:",t)}return}const n=decodeURIComponent(o);if(n.startsWith("http://")||n.startsWith("https://"))try{new URL(n),console.log(`SERVICE WORKER: SFMC redirecting tab ${t.tabId} from ${t.url} to ${n}`),await chrome.tabs.update(t.tabId,{url:n})}catch(e){console.warn(`SERVICE WORKER: SFMC - Invalid extracted URL "${n}". Error: ${e.message}`)}else console.warn(`SERVICE WORKER: SFMC - Extracted part "${n}" not HTTP(S).`)}}catch(t){console.error(`SERVICE WORKER: SFMC - Error processing URL "${t.url}": ${t.message}`)}},{urls:[`*://${SFMC_WRAPPER_HOST}${SFMC_WRAPPER_PREFIX_PATH}*`],types:["main_frame"]});const OVERLAY_STORAGE_IMAGE_KEY="toolkitOverlayImage",OVERLAY_STORAGE_SETTINGS_KEY="toolkitOverlaySettings";chrome.runtime.onMessage.addListener((t,e,o)=>{if("toolkit-content-overlay"===t.source&&"getInitialOverlayState"===t.action)return(async()=>{try{const t=await chrome.storage.local.get([OVERLAY_STORAGE_IMAGE_KEY,OVERLAY_STORAGE_SETTINGS_KEY]);t[OVERLAY_STORAGE_IMAGE_KEY]&&t[OVERLAY_STORAGE_SETTINGS_KEY]?o({hasState:!0,imageData:t[OVERLAY_STORAGE_IMAGE_KEY],settings:t[OVERLAY_STORAGE_SETTINGS_KEY]}):o({hasState:!1})}catch(t){console.error("BG: Err getting overlay state:",t),o({hasState:!1,error:t.message})}})(),!0;if("toolkit-popup-overlay"===t.source&&void 0===e.tab)return(async()=>{try{const[e]=await chrome.tabs.query({active:!0,currentWindow:!0});if(e&&e.id&&e.url&&(e.url.startsWith("http:")||e.url.startsWith("https:"))){try{await chrome.scripting.executeScript({target:{tabId:e.id},files:["content_overlay.js"]})}catch(t){console.warn("BG: content_overlay.js inject info:",t.message)}const n=await chrome.tabs.sendMessage(e.id,t);o(n)}else o({error:"No active HTTP/S tab for overlay."})}catch(t){console.error("BG: Err handling overlay msg:",t),o({error:"BG err fwd to content: "+t.message})}})(),!0}),(async()=>{await loadInitialSfmcState(),console.log("SERVICE WORKER (Toolkit Pro): Initial states processed.")})(),chrome.runtime.onInstalled.addListener(async t=>{t.reason==="install"&&(console.log("SERVICE WORKER (Toolkit Pro): Extension first install."),await loadInitialSfmcState(),await chrome.storage.local.remove([OVERLAY_STORAGE_IMAGE_KEY,OVERLAY_STORAGE_SETTINGS_KEY]),console.log("SERVICE WORKER (Toolkit Pro): Overlay storage cleared."))});