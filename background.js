// background.js (Service Worker for MV3)
console.log("SERVICE WORKER (Toolkit Pro): Script started.");const SFMC_WRAPPER_HOST="user-content.s4.sfmc-content.com";const SFMC_WRAPPER_PREFIX_PATH="/httpgetwrap|";const STORAGE_KEY_SFMC_UNWRAPPER_ENABLED='sfmcUnwrapperEnabled';let isSfmcUnwrapperEnabled=!0;async function loadInitialSfmcState(){try{const d=await chrome.storage.sync.get(STORAGE_KEY_SFMC_UNWRAPPER_ENABLED);isSfmcUnwrapperEnabled=void 0!==d[STORAGE_KEY_SFMC_UNWRAPPER_ENABLED]?d[STORAGE_KEY_SFMC_UNWRAPPER_ENABLED]:true;if(void 0===d[STORAGE_KEY_SFMC_UNWRAPPER_ENABLED])await chrome.storage.sync.set({[STORAGE_KEY_SFMC_UNWRAPPER_ENABLED]:!0});console.log('SERVICE WORKER: SFMC Unwrapper state loaded. Enabled:',isSfmcUnwrapperEnabled)}catch(e){console.error('SERVICE WORKER: Error loading SFMC state:',e);isSfmcUnwrapperEnabled=!0}}chrome.storage.onChanged.addListener((c,n)=>{n==="sync"&&c[STORAGE_KEY_SFMC_UNWRAPPER_ENABLED]&&(isSfmcUnwrapperEnabled=c[STORAGE_KEY_SFMC_UNWRAPPER_ENABLED].newValue,console.log("SERVICE WORKER: SFMC Unwrapper state changed. Now:",isSfmcUnwrapperEnabled))});chrome.webRequest.onBeforeRequest.addListener(async function(d){if(!isSfmcUnwrapperEnabled||"GET"!==d.method||"main_frame"!==d.type||!d.url||!d.tabId||d.tabId<0)return;try{const t=new URL(d.url);if(t.hostname===SFMC_WRAPPER_HOST&&t.pathname.startsWith(SFMC_WRAPPER_PREFIX_PATH)){const e=t.pathname.substring(SFMC_WRAPPER_PREFIX_PATH.length);if(!e){console.warn(`SERVICE WORKER: Incomplete SFMC (no target): ${d.url}. Redirecting to about:blank.`);try{await chrome.tabs.update(d.tabId,{url:"about:blank"})}catch(d){console.error("SERVICE WORKER: Error redirecting to about:blank:",d)}return}const o=decodeURIComponent(e);if(o.startsWith("http://")||o.startsWith("https://"))try{new URL(o),console.log(`SERVICE WORKER: SFMC redirecting tab ${d.tabId} from ${d.url} to ${o}`),await chrome.tabs.update(d.tabId,{url:o})}catch(t){console.warn(`SERVICE WORKER: SFMC - Invalid extracted URL "${o}". Error: ${t.message}`)}else console.warn(`SERVICE WORKER: SFMC - Extracted part "${o}" not HTTP(S).`)}}catch(d){console.error(`SERVICE WORKER: SFMC - Error processing URL "${d.url}": ${d.message}`)}},{urls:[`*://${SFMC_WRAPPER_HOST}${SFMC_WRAPPER_PREFIX_PATH}*`],types:["main_frame"]});const OVERLAY_STORAGE_IMAGE_KEY="toolkitOverlayImage",OVERLAY_STORAGE_SETTINGS_KEY="toolkitOverlaySettings";chrome.runtime.onMessage.addListener((r,s,dR)=>{if("toolkit-content-overlay"===r.source&&"getInitialOverlayState"===r.action)return(async()=>{try{const t=await chrome.storage.local.get([OVERLAY_STORAGE_IMAGE_KEY,OVERLAY_STORAGE_SETTINGS_KEY]);t[OVERLAY_STORAGE_IMAGE_KEY]&&t[OVERLAY_STORAGE_SETTINGS_KEY]?dR({hasState:!0,imageData:t[OVERLAY_STORAGE_IMAGE_KEY],settings:t[OVERLAY_STORAGE_SETTINGS_KEY]}):dR({hasState:!1})}catch(t){console.error("BG: Error getting overlay state for content script:",t),dR({hasState:!1,error:t.message})}})(),!0;if("toolkit-popup-overlay"===r.source&&void 0===s.tab)return(async()=>{try{const[s]=await chrome.tabs.query({active:!0,currentWindow:!0});if(s&&s.id&&s.url&&(s.url.startsWith("http:")||s.url.startsWith("https:"))){try{await chrome.scripting.executeScript({target:{tabId:s.id},files:["content_overlay.js"]})}catch(t){console.warn("BG: content_overlay.js injection attempt info:",t.message)}const t=await chrome.tabs.sendMessage(s.id,r);dR(t)}else dR({error:"No active HTTP/S tab found for overlay."})}catch(t){console.error("BG: Error handling overlay message to content script:",t),dR({error:"Background error forwarding to content script: "+t.message})}})(),!0});(async()=>{await loadInitialSfmcState(),console.log("SERVICE WORKER (Toolkit Pro): Initial states processed.")})();chrome.runtime.onInstalled.addListener(async d=>{d.reason==="install"&&(console.log("SERVICE WORKER (Toolkit Pro): Extension first install."),await loadInitialSfmcState(),await chrome.storage.local.remove([OVERLAY_STORAGE_IMAGE_KEY,OVERLAY_STORAGE_SETTINGS_KEY]),console.log("SERVICE WORKER (Toolkit Pro): Overlay storage cleared on install."))});