// content_overlay.js
let overlayImageElement = null; const OVERLAY_ID = 'pixel-perfect-overlay-image-from-toolkit-pro';
function createOrUpdateOverlay(imageData, settings) { if (!document.body) { setTimeout(() => createOrUpdateOverlay(imageData, settings), 100); return; } if (!overlayImageElement) { overlayImageElement = document.createElement('img'); overlayImageElement.id = OVERLAY_ID; Object.assign(overlayImageElement.style, { position: 'fixed', zIndex: '2147483640', pointerEvents: 'none', border: '1px dashed rgba(255,0,0,0.3)', imageRendering: 'pixelated', transformOrigin: 'top left' }); document.body.appendChild(overlayImageElement); console.log("Pixel Overlay (Content): Element created."); } if (imageData && typeof imageData === 'string' && imageData.startsWith('data:image')) { overlayImageElement.src = imageData; console.log("Pixel Overlay (Content): Image source updated."); } if (settings) applySettings(settings); }
function applySettings(settings) { if (!overlayImageElement || !settings) { console.warn("Pixel Overlay (Content): applySettings missing element or settings."); return; } Object.assign(overlayImageElement.style, { left: (settings.x || 0) + 'px', top: (settings.y || 0) + 'px', opacity: settings.opacity !== undefined ? settings.opacity : 1, display: settings.visible !== undefined ? (settings.visible ? 'block' : 'none') : 'block' }); const scaleValue = settings.scale !== undefined ? settings.scale : 1; overlayImageElement.style.transform = `scale(${scaleValue})`; console.log("Pixel Overlay (Content): Settings applied - ", JSON.stringify(settings), "Applied transform:", overlayImageElement.style.transform); }
function removeOverlay() { if (overlayImageElement) { overlayImageElement.remove(); overlayImageElement = null; console.log("Pixel Overlay (Content): Element removed."); } }
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => { if (request.source === 'toolkit-popup-overlay') { console.log("Pixel Overlay (Content) received message:", request.action); switch (request.action) { case 'create': case 'update': createOrUpdateOverlay(request.imageData, request.settings); sendResponse({ status: "Overlay " + request.action + "d" }); break; case 'remove': removeOverlay(); sendResponse({ status: "Overlay removed" }); break; default: sendResponse({ status: "Unknown overlay action: " + request.action }); } } return true; });
(async () => { try { console.log("Pixel Overlay (Content): Requesting initial state."); const response = await chrome.runtime.sendMessage({ source: 'toolkit-content-overlay', action: 'getInitialOverlayState' }); if (chrome.runtime.lastError) { console.warn("Pixel Overlay (Content): Error getting initial state:", chrome.runtime.lastError.message); return; } if (response && response.hasState && response.settings) { console.log("Pixel Overlay (Content): Applying initial state from background:", response.settings); createOrUpdateOverlay(response.imageData, response.settings); } else { console.log("Pixel Overlay (Content): No initial overlay state."); } } catch (error) { console.warn("Pixel Overlay (Content): Could not get initial state from background.", error); } })();
console.log("Pixel Overlay (content_overlay.js) loaded.");